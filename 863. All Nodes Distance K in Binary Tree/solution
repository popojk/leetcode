# Definition for a binary tree node.
from collections import deque
from typing import List


class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


class BFSSolution:
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:
        """
        time: O(n)
        space: O(n)
        """
        ans = []
        parent = {}
        queue = deque()
        queue.append(root)

        while queue:
            size = len(queue)
            for _ in range(size):
                top = queue.popleft()
                if top.left:
                    parent[top.left.val] = top
                    queue.append(top.left)
                if top.right:
                    parent[top.right.val] = top
                    queue.append(top.right)

        visited = {}
        queue.append(target)

        while k > 0 and queue:
            size = len(queue)

            for _ in range(size):
                top = queue.popleft()
                visited[top.val] = 1
                if top.left and top.left.val not in visited:
                    queue.append(top.left)
                if top.right and top.right.val not in visited:
                    queue.append(top.right)
                if top.val in parent and parent[top.val].val not in visited:
                    queue.append(parent[top.val])
            k -= 1

        while queue:
            ans.append(queue.popleft().val)
        return ans


class DFSSolution:
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:
        def getParent(node, parent):
            if node is None:
                return

            parentMap[node] = parent
            getParent(node.left, node)
            getParent(node.right, node)

        def getNodes(node, cnt):
            if not node or node in seen or cnt > k:
                return

            seen.add(node)
            if cnt == k:
                res.append(node.val)

            getNodes(node.left, cnt + 1)
            getNodes(node.right, cnt + 1)
            getNodes(parentMap[node], cnt + 1)

        parentMap = {}
        seen = set()
        res = []

        # Build the parent map
        getParent(root, None)

        # Find nodes at distance K
        getNodes(target, 0)

        return res
